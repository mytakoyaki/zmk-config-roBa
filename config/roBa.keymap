#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_press>;

            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q          &kp L         &kp U         &kp COMMA             &kp PERIOD                                                       &kp F                 &kp W  &kp R  &kp Y  &kp P
&kp E          &kp I         &kp A         &kp O                 &kp MINUS        &kp LS(LG(S))                  &kp MINUS        &kp K                 &kp T  &kp N  &kp S  &kp H
&kt LC(SPACE)  &kp Z         &kp X         &kp C                 &kp V            &kp COLON                      &kp SEMICOLON    &kp G                 &kp D  &kp M  &kp J  &kp B
&kp LCTRL      &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 2 TAB  &mt LCTRL SPACE  &lt_to_layer_0 3 LEFT_ALT      &lt 1 BACKSPACE  &mt LEFT_SHIFT ENTER                       &mkp LCLK
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        signal {
            bindings = <
&kp C_AC_DESKTOP_SHOW_ALL_WINDOWS  &kp LEFT_PARENTHESIS  &kp DOLLAR     &kp RIGHT_PARENTHESIS  &kp PIPE                            &kp PIPE          &kp ASTERISK  &kp LCTRL    &kp SQT            &kp EXCLAMATION
&kp AT_SIGN                        &kp LEFT_BRACE        &kp BACKSLASH  &kp RIGHT_BRACE        &kp COLON      &trans      &kp F13  &kp SEMICOLON     &kp EQUAL     &kp SLASH    &kp UNDERSCORE     &kp HASH
&kp QUESTION                       &kp LEFT_BRACKET      &kp AMPERSAND  &kp RIGHT_BRACKET      &kp LESS_THAN  &trans      &trans   &kp GREATER_THAN  &kp PLUS      &kp PERCENT  &kp DOUBLE_QUOTES  &kp TILDE
&trans                             &kp LEFT_ALT          &trans         &trans                 &trans         &trans      &trans   &trans                                                          &mkp RCLK
            >;
        };

        NUM {
            bindings = <
&kp PRINTSCREEN  &kp N7        &kp N8        &kp N9        &kp BACKSPACE                                               &trans  &trans          &kp UP_ARROW    &trans           &trans
&kp N0           &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp ENTER      &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&kp PERIOD       &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp TAB        &kp EQUAL                    &trans          &trans  &trans          &trans          &trans           &trans
&trans           &trans        &trans        &trans        &trans         &trans                       &trans          &trans                                                   &mkp MCLK
            >;
        };

        function {
            bindings = <
&kp DEL   &kp F7  &kp F8  &kp F9  &kp F10                      &trans  &trans          &msc SCRL_UP    &trans           &trans
&kp HOME  &kp F4  &kp F5  &kp F6  &kp F11  &trans      &trans  &trans  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_RIGHT  &trans
&kp ESC   &kp F1  &kp F2  &kp F3  &kp F12  &trans      &trans  &trans  &trans          &trans          &trans           &trans
&trans    &trans  &trans  &trans  &trans   &trans      &trans  &trans                                                   &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
